/**
 * nautilus-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Reparti from './Reparti';
import ShiftPreference from './ShiftPreference';

/**
 * The Nurse model module.
 * @module model/Nurse
 * @version 1.0.0-SNAPSHOT
 */
class Nurse {
    /**
     * Constructs a new <code>Nurse</code>.
     * @alias module:model/Nurse
     * @param age {Number} 
     */
    constructor(age) { 
        
        Nurse.initialize(this, age);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, age) { 
        obj['age'] = age;
    }

    /**
     * Constructs a <code>Nurse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Nurse} obj Optional instance to populate.
     * @return {module:model/Nurse} The populated <code>Nurse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Nurse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], 'Number');
            }
            if (data.hasOwnProperty('repartoID')) {
                obj['repartoID'] = Reparti.constructFromObject(data['repartoID']);
            }
            if (data.hasOwnProperty('shiftPreferenceID')) {
                obj['shiftPreferenceID'] = ShiftPreference.constructFromObject(data['shiftPreferenceID']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Nurse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Nurse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Nurse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // validate the optional field `repartoID`
        if (data['repartoID']) { // data not null
          Reparti.validateJSON(data['repartoID']);
        }
        // validate the optional field `shiftPreferenceID`
        if (data['shiftPreferenceID']) { // data not null
          ShiftPreference.validateJSON(data['shiftPreferenceID']);
        }

        return true;
    }


}

Nurse.RequiredProperties = ["age"];

/**
 * @member {Number} id
 */
Nurse.prototype['id'] = undefined;

/**
 * @member {String} firstName
 */
Nurse.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
Nurse.prototype['lastName'] = undefined;

/**
 * @member {Number} age
 */
Nurse.prototype['age'] = undefined;

/**
 * @member {module:model/Reparti} repartoID
 */
Nurse.prototype['repartoID'] = undefined;

/**
 * @member {module:model/ShiftPreference} shiftPreferenceID
 */
Nurse.prototype['shiftPreferenceID'] = undefined;






export default Nurse;

